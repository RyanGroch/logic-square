{"version":3,"file":"static/js/158.9dd7f6d8.chunk.js","mappings":"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","sources":["../node_modules/@babel/runtime/helpers/esm/arrayLikeToArray.js","../node_modules/@babel/runtime/helpers/esm/unsupportedIterableToArray.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","puzzle-logic/solver-helpers.ts","types.ts","puzzle-logic/puzzle-helpers.ts","puzzle-logic/solver-generator.ts","puzzle-logic/create-puzzle.ts","puzzle-logic/create-solution.ts","../node_modules/@babel/runtime/helpers/esm/defineProperty.js","../node_modules/@babel/runtime/helpers/esm/objectSpread2.js","puzzle-logic/solver-visualizer.ts","app-logic/helpers.ts","color-consts.ts","app-logic/worker.ts"],"sourcesContent":["export default function _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);\n}","import arrayWithHoles from \"./arrayWithHoles.js\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableRest from \"./nonIterableRest.js\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n\n  if (!it) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = it.call(o);\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import {\r\n  SolverCondition,\r\n  Square,\r\n  Direction,\r\n  SolvedBoard,\r\n  VisualizerBoard,\r\n  PartiallySolvedBoard,\r\n  PartiallySolvedVal,\r\n} from \"../types\";\r\n\r\nexport const inputCondition = (\r\n  conditions: Array<SolverCondition>,\r\n  squares: Array<Square>,\r\n  numSquares: number,\r\n  claim: boolean,\r\n  assessment: boolean\r\n): Array<SolverCondition> => {\r\n  return [...conditions, [squares, numSquares, claim, assessment]];\r\n};\r\n\r\nexport const inputAnswer = (\r\n  board: PartiallySolvedBoard,\r\n  rowIndex: number,\r\n  colIndex: number,\r\n  valToInput: PartiallySolvedVal\r\n): PartiallySolvedBoard => {\r\n  return board.map((row, i) =>\r\n    row.map((currVal, j) =>\r\n      rowIndex === i && colIndex === j ? valToInput : currVal\r\n    )\r\n  );\r\n};\r\n\r\nexport const checkConditions = (\r\n  board: PartiallySolvedBoard,\r\n  conditions: Array<SolverCondition>\r\n): boolean => {\r\n  for (let condition of conditions) {\r\n    const [squares, numThatMeetClaim, claim, assessment] = condition;\r\n    const [lowestOfClaim, highestOfClaim] = squares.reduce(\r\n      (vals: [number, number], square: Square): [number, number] => {\r\n        const [i, j] = square;\r\n        return typeof board[i][j] !== \"boolean\"\r\n          ? [vals[0], vals[1] + 1]\r\n          : board[i][j] === claim\r\n          ? [vals[0] + 1, vals[1] + 1]\r\n          : vals;\r\n      },\r\n      [0, 0]\r\n    );\r\n\r\n    const hasAllInfo = highestOfClaim === lowestOfClaim;\r\n\r\n    if (\r\n      ((highestOfClaim < numThatMeetClaim ||\r\n        lowestOfClaim > numThatMeetClaim) &&\r\n        assessment) ||\r\n      (hasAllInfo && highestOfClaim === numThatMeetClaim && !assessment)\r\n    ) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nexport const getSquares = (\r\n  rowIndex: number,\r\n  colIndex: number,\r\n  direction: Direction\r\n): Array<Square> => {\r\n  const squares: Array<Square> = [];\r\n  const start =\r\n    direction === \"UP\" || direction === \"LEFT\"\r\n      ? 0\r\n      : direction === \"RIGHT\"\r\n      ? colIndex + 1\r\n      : rowIndex + 1;\r\n  const end =\r\n    direction === \"RIGHT\" || direction === \"DOWN\"\r\n      ? 5\r\n      : direction === \"UP\"\r\n      ? rowIndex\r\n      : colIndex;\r\n  const vertical = direction === \"UP\" || direction === \"DOWN\";\r\n\r\n  for (let k = start; k < end; k++) {\r\n    squares.push(vertical ? [k, colIndex] : [rowIndex, k]);\r\n  }\r\n\r\n  return squares;\r\n};\r\n\r\nexport const countTrueSquares = (\r\n  squares: Array<Square>,\r\n  solution: SolvedBoard\r\n): number =>\r\n  squares.reduce((numTrue: number, square: Square) => {\r\n    const [row, col] = square;\r\n    const value = solution[row][col];\r\n    return value ? numTrue + 1 : numTrue;\r\n  }, 0);\r\n\r\nexport const getRegularBoard = (\r\n  visBoard: VisualizerBoard\r\n): PartiallySolvedBoard =>\r\n  visBoard.map((row) =>\r\n    row.map((item) => (item.length === 2 ? item[0] : item))\r\n  );\r\n\r\nexport const progress = (i: number, j: number): [number, number] => {\r\n  const newI = j === 4 ? i + 1 : i;\r\n  const newJ = j === 4 ? 0 : j + 1;\r\n\r\n  return [newI, newJ];\r\n};\r\n\r\nexport const backtrack = (i: number, j: number): [number, number] => {\r\n  const newI = j === 0 ? i - 1 : i;\r\n  const newJ = j === 0 ? 4 : j - 1;\r\n\r\n  return [newI, newJ];\r\n};\r\n","export enum Direction {\r\n  Up = \"UP\",\r\n  Right = \"RIGHT\",\r\n  Down = \"DOWN\",\r\n  Left = \"LEFT\",\r\n}\r\n\r\nexport type BoardCondition = [Direction, number, boolean];\r\n\r\nexport type PartiallySolvedVal = BoardCondition | boolean;\r\nexport type PartiallySolvedBoard = PartiallySolvedVal[][];\r\n\r\nexport type SolvedBoard = boolean[][];\r\nexport type UnsolvedBoard = BoardCondition[][];\r\n\r\ntype VisualizerVal = BoardCondition | [boolean, boolean];\r\nexport type VisualizerBoard = VisualizerVal[][];\r\n\r\nexport type ColorBoard = number[][];\r\n\r\nexport type Square = [number, number];\r\nexport type SolverCondition = [Array<Square>, number, boolean, boolean];\r\n\r\nexport type GeneratorPayload = [number, number];\r\nexport type SolverPayload = [SolverStateI, UnsolvedBoard];\r\nexport type WorkerPayload = GeneratorPayload | SolverPayload;\r\n\r\nexport type GeneratorReturn = [UnsolvedBoard, SolvedBoard];\r\n\r\nexport interface SolverStateI {\r\n  board: PartiallySolvedBoard;\r\n  row: number;\r\n  col: number;\r\n  conditions: Array<SolverCondition>;\r\n  solved: boolean;\r\n}\r\n\r\nexport interface StateI {\r\n  puzzle: UnsolvedBoard | null;\r\n  solution: SolvedBoard | null;\r\n  colorBoard: ColorBoard;\r\n  selectedColor: number;\r\n  startSolving: boolean;\r\n  solving: boolean;\r\n  startGenerating: boolean;\r\n  generating: boolean;\r\n  gettingPuzzle: boolean;\r\n  complete: boolean;\r\n  showModal: boolean;\r\n  showError: boolean;\r\n  errorMsg: string;\r\n  minTrues: number;\r\n  maxTrues: number;\r\n  solverState: SolverStateI | null;\r\n}\r\n","import { countTrueSquares, getSquares } from \"./solver-helpers\";\r\nimport {\r\n  BoardCondition,\r\n  Direction,\r\n  PartiallySolvedBoard,\r\n  SolvedBoard,\r\n} from \"../types\";\r\n\r\nexport const getConditions = (\r\n  solution: SolvedBoard,\r\n  rowIndex: number,\r\n  colIndex: number,\r\n  value: boolean\r\n): Array<BoardCondition> => {\r\n  const conditions: Array<BoardCondition> = [];\r\n  const dirs: Array<Direction> = [\r\n    Direction.Up,\r\n    Direction.Right,\r\n    Direction.Down,\r\n    Direction.Left,\r\n  ];\r\n  const shuffledDirs = shuffleArray<Direction>(dirs);\r\n\r\n  for (let dir of shuffledDirs) {\r\n    const squares = getSquares(rowIndex, colIndex, dir);\r\n\r\n    if (!squares.length) {\r\n      continue;\r\n    }\r\n\r\n    const numTrue = countTrueSquares(squares, solution);\r\n    const numFalse = squares.length - numTrue;\r\n\r\n    for (let claim of [true, false]) {\r\n      const inputNum = claim ? numTrue : numFalse;\r\n\r\n      if (value) {\r\n        conditions.push([dir, inputNum, claim]);\r\n        continue;\r\n      }\r\n\r\n      const possibleNumClaims = Array(squares.length + 1)\r\n        .fill(0)\r\n        .map((_, i) => i);\r\n      const possibleNumsRemaining = possibleNumClaims.filter(\r\n        (num) => inputNum !== num\r\n      );\r\n      for (let num of possibleNumsRemaining) {\r\n        conditions.push([dir, num, claim]);\r\n      }\r\n    }\r\n  }\r\n  return conditions;\r\n};\r\n\r\nexport const removeSquareString = (\r\n  squares: Array<string>,\r\n  squareToRemove: string\r\n): Array<string> => squares.filter((square) => square !== squareToRemove);\r\n\r\nexport const insertCondition = (\r\n  board: PartiallySolvedBoard,\r\n  condition: BoardCondition,\r\n  rowIndex: number,\r\n  colIndex: number\r\n) =>\r\n  board.map((row, i) =>\r\n    row.map((item: BoardCondition | boolean, j) =>\r\n      rowIndex === i && colIndex === j ? condition : item\r\n    )\r\n  );\r\n\r\nexport const shuffleArray = <T>(array: Array<T>): Array<T> => {\r\n  const arr = [...array];\r\n  for (let i = arr.length - 1; i > 0; i--) {\r\n    const j = Math.floor(Math.random() * (i + 1));\r\n    const temp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = temp;\r\n  }\r\n  return arr;\r\n};\r\n\r\nexport const allSquareStrings = Array(25)\r\n  .fill(\"\")\r\n  .map((_, i) => {\r\n    const row = Math.floor(i / 5);\r\n    const col = i % 5;\r\n    return `${row}/${col}`;\r\n  });\r\n","import { PartiallySolvedBoard, SolverCondition } from \"../types\";\r\nimport {\r\n  progress,\r\n  inputAnswer,\r\n  inputCondition,\r\n  getSquares,\r\n  checkConditions,\r\n} from \"./solver-helpers\";\r\n\r\nconst solutions: Array<PartiallySolvedBoard> = [];\r\n\r\nconst solverGenerator = (\r\n  board: PartiallySolvedBoard\r\n): Array<PartiallySolvedBoard> => {\r\n  solutions.length = 0;\r\n  solverGeneratorNext(board, 0, 0, []);\r\n\r\n  return solutions;\r\n};\r\n\r\nconst solverGeneratorNext = (\r\n  board: PartiallySolvedBoard,\r\n  rowIndex: number,\r\n  colIndex: number,\r\n  conditions: Array<SolverCondition>\r\n): void => {\r\n  if (rowIndex === 5) {\r\n    solutions.push(board);\r\n    return;\r\n  }\r\n\r\n  const current = board[rowIndex][colIndex];\r\n  const [nextRowI, nextColI] = progress(rowIndex, colIndex);\r\n\r\n  if (typeof current === \"boolean\") {\r\n    return solverGeneratorNext(board, nextRowI, nextColI, conditions);\r\n  }\r\n\r\n  const [direction, numSqares, claim] = current;\r\n  const squares = getSquares(rowIndex, colIndex, direction);\r\n\r\n  for (let b of [false, true]) {\r\n    const newBoard = inputAnswer(board, rowIndex, colIndex, b);\r\n    const newConditions = inputCondition(\r\n      conditions,\r\n      squares,\r\n      numSqares,\r\n      claim,\r\n      b\r\n    );\r\n    const passed = checkConditions(newBoard, newConditions);\r\n    if (passed) {\r\n      solverGeneratorNext(newBoard, nextRowI, nextColI, newConditions);\r\n    }\r\n  }\r\n};\r\n\r\nexport default solverGenerator;\r\n","import { PartiallySolvedBoard, SolvedBoard } from \"../types\";\r\nimport {\r\n  getConditions,\r\n  removeSquareString,\r\n  insertCondition,\r\n  allSquareStrings,\r\n  shuffleArray,\r\n} from \"./puzzle-helpers\";\r\nimport solverGenerator from \"./solver-generator\";\r\n\r\nconst createPuzzle = (solution: SolvedBoard): PartiallySolvedBoard => {\r\n  const squareStrings = allSquareStrings;\r\n  const board: PartiallySolvedBoard = solution.map((row) =>\r\n    row.map((val) => val)\r\n  );\r\n  const finalPuzzle = createPuzzleNext(board, solution, squareStrings);\r\n  return finalPuzzle;\r\n};\r\n\r\nconst createPuzzleNext = (\r\n  board: PartiallySolvedBoard,\r\n  solution: SolvedBoard,\r\n  squareStrings: Array<string>\r\n): PartiallySolvedBoard => {\r\n  if (!squareStrings.length) {\r\n    return board;\r\n  }\r\n\r\n  const shuffledSquares = shuffleArray(squareStrings);\r\n  for (let squareString of shuffledSquares) {\r\n    const indices = squareString.split(\"/\");\r\n    const [rowIndex, colIndex] = [Number(indices[0]), Number(indices[1])];\r\n    const val = solution[rowIndex][colIndex];\r\n    const conditions = shuffleArray(\r\n      getConditions(solution, rowIndex, colIndex, val)\r\n    );\r\n\r\n    for (let condition of conditions) {\r\n      const newBoard = insertCondition(board, condition, rowIndex, colIndex);\r\n      const possibleSolutions = solverGenerator(newBoard);\r\n\r\n      if (!possibleSolutions.length) {\r\n        throw new Error(\"Puzzle has no solutions.\");\r\n      }\r\n\r\n      if (possibleSolutions.length > 1) {\r\n        continue;\r\n      }\r\n\r\n      const newSquareStrings = removeSquareString(\r\n        shuffledSquares,\r\n        squareString\r\n      );\r\n      const nextIter = createPuzzleNext(newBoard, solution, newSquareStrings);\r\n\r\n      if (nextIter.length) {\r\n        return nextIter;\r\n      }\r\n    }\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport default createPuzzle;\r\n","import { SolvedBoard } from \"../types\";\r\nimport { allSquareStrings } from \"./puzzle-helpers\";\r\n\r\nconst createSolution = (numTrues: number): SolvedBoard => {\r\n  const falseSquares = [...allSquareStrings];\r\n\r\n  for (let i = 0; i < numTrues; i++) {\r\n    const randIndex = Math.floor(Math.random() * falseSquares.length);\r\n    falseSquares.splice(randIndex, 1);\r\n  }\r\n\r\n  const solution = Array(5)\r\n    .fill(Array(5).fill(true))\r\n    .map((row: Array<boolean>, i: number) =>\r\n      row.map((_, j) => !falseSquares.includes(`${i}/${j}`))\r\n    );\r\n\r\n  return solution;\r\n};\r\n\r\nexport default createSolution;\r\n","export default function _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}","import defineProperty from \"./defineProperty.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nexport default function _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}","import { SolverStateI, UnsolvedBoard } from \"../types\";\r\nimport {\r\n  backtrack,\r\n  checkConditions,\r\n  getSquares,\r\n  inputAnswer,\r\n  inputCondition,\r\n  progress,\r\n} from \"./solver-helpers\";\r\n\r\nconst solverVisualizerNext = (\r\n  solverState: SolverStateI,\r\n  puzzle: UnsolvedBoard\r\n): SolverStateI => {\r\n  const { board, row, col, conditions } = solverState;\r\n  if (row === 5) return { ...solverState, solved: true };\r\n  if (row === -1) throw new Error(\"Error: No solutions exist.\");\r\n\r\n  const current = board[row][col];\r\n  const [nextRow, nextCol] = progress(row, col);\r\n  const boardCondition = puzzle[row][col];\r\n  const [direction, numSquares, claim] = boardCondition;\r\n  const squares = getSquares(row, col, direction);\r\n\r\n  if (typeof current !== \"boolean\") {\r\n    const newBoard = inputAnswer(board, row, col, false);\r\n    const newConditions = inputCondition(\r\n      conditions,\r\n      squares,\r\n      numSquares,\r\n      claim,\r\n      false\r\n    );\r\n    const passed = checkConditions(newBoard, newConditions);\r\n    return {\r\n      board: newBoard,\r\n      row: passed ? nextRow : row,\r\n      col: passed ? nextCol : col,\r\n      conditions: passed ? newConditions : conditions,\r\n      solved: false,\r\n    };\r\n  }\r\n\r\n  if (!current) {\r\n    const newBoard = inputAnswer(board, row, col, true);\r\n    const newConditions = inputCondition(\r\n      conditions,\r\n      squares,\r\n      numSquares,\r\n      claim,\r\n      true\r\n    );\r\n    const passed = checkConditions(newBoard, newConditions);\r\n    return {\r\n      board: newBoard,\r\n      row: passed ? nextRow : row,\r\n      col: passed ? nextCol : col,\r\n      conditions: passed ? newConditions : conditions,\r\n      solved: false,\r\n    };\r\n  }\r\n\r\n  const oldConditions = conditions.slice(0, -1);\r\n  const oldBoard = inputAnswer(board, row, col, boardCondition);\r\n  const [oldRow, oldCol] = backtrack(row, col);\r\n  return {\r\n    board: oldBoard,\r\n    row: oldRow,\r\n    col: oldCol,\r\n    conditions: oldConditions,\r\n    solved: false,\r\n  };\r\n};\r\n\r\nexport default solverVisualizerNext;\r\n","import { PartiallySolvedBoard, SolvedBoard, ColorBoard } from \"../types\";\r\nimport { startingColor } from \"../color-consts\";\r\nimport { pregenerated } from \"../pregenerated\";\r\n\r\nexport const checkComplete = (colorBoard: ColorBoard, solution: SolvedBoard) =>\r\n  colorBoard.every((row, i) =>\r\n    row.every(\r\n      (val, j) =>\r\n        (val === 0 && solution[i][j]) || (val !== 0 && !solution[i][j])\r\n    )\r\n  );\r\n\r\nexport const boardToColor = (board: PartiallySolvedBoard): ColorBoard =>\r\n  board.map((row) =>\r\n    row.map((val) => (typeof val !== \"boolean\" ? startingColor : val ? 0 : 1))\r\n  );\r\n\r\nexport const getNumTrues = (minTrues: number, maxTrues: number): number =>\r\n  Math.floor(Math.random() * (1 + maxTrues - minTrues) + minTrues);\r\n\r\nexport const getPregeneratedPuzzle = (minTrues: number, maxTrues: number) => {\r\n  const numTrues = getNumTrues(minTrues, maxTrues);\r\n  const puzzleIndex = Math.floor(Math.random() * 5);\r\n  return pregenerated[numTrues - 1][puzzleIndex];\r\n};\r\n","export const colors = [\r\n  \"#ccffcc\",\r\n  \"#ff9980\",\r\n  \"#ffffb3\",\r\n  \"#b3b3ff\",\r\n  \"#f0b3ff\",\r\n  \"#fff\",\r\n];\r\n\r\nexport const startingColor = 5;\r\n\r\nexport const defaultColorBoard = Array(5).fill(Array(5).fill(startingColor));\r\n","import createPuzzle from \"../puzzle-logic/create-puzzle\";\r\nimport createSolution from \"../puzzle-logic/create-solution\";\r\nimport solverVisualizerNext from \"../puzzle-logic/solver-visualizer\";\r\nimport {\r\n  SolvedBoard,\r\n  WorkerPayload,\r\n  GeneratorPayload,\r\n  SolverPayload,\r\n} from \"../types\";\r\nimport { getNumTrues } from \"./helpers\";\r\n\r\nonmessage = (msg): void => {\r\n  const generate: boolean = msg.data[0];\r\n  const data = msg.data[1] as WorkerPayload;\r\n\r\n  if (generate) {\r\n    const [minTrues, maxTrues] = data as GeneratorPayload;\r\n    const numTrues = getNumTrues(minTrues, maxTrues);\r\n    const solution: SolvedBoard = createSolution(numTrues);\r\n    const puzzle = createPuzzle(solution);\r\n    postMessage([puzzle, solution]);\r\n  } else {\r\n    const [solverState, puzzle] = data as SolverPayload;\r\n    const newState = solverVisualizerNext(solverState, puzzle);\r\n    postMessage(newState);\r\n  }\r\n};\r\n"],"names":["_arrayLikeToArray","arr","len","length","i","arr2","Array","_unsupportedIterableToArray","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","from","test","_slicedToArray","isArray","_i","Symbol","iterator","_s","_e","_arr","_n","_d","next","done","push","value","err","TypeError","_createForOfIteratorHelper","allowArrayLike","it","F","s","e","f","normalCompletion","didErr","step","_e2","_toConsumableArray","iter","Direction","inputCondition","conditions","squares","numSquares","claim","assessment","inputAnswer","board","rowIndex","colIndex","valToInput","map","row","currVal","j","checkConditions","numThatMeetClaim","reduce","vals","square","lowestOfClaim","highestOfClaim","getSquares","direction","end","vertical","k","countTrueSquares","solution","numTrue","col","progress","getConditions","dirs","Up","Right","Down","Left","shuffleArray","dir","numFalse","inputNum","possibleNumsRemaining","fill","_","filter","num","removeSquareString","squareToRemove","insertCondition","condition","item","array","Math","floor","random","temp","allSquareStrings","solutions","solverGeneratorNext","current","nextRowI","nextColI","numSqares","b","newBoard","newConditions","createPuzzleNext","squareStrings","shuffledSquares","squareString","indices","split","Number","val","possibleSolutions","solverGenerator","Error","nextIter","numTrues","falseSquares","randIndex","splice","includes","_defineProperty","obj","key","defineProperty","enumerable","configurable","writable","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","sym","getOwnPropertyDescriptor","apply","_objectSpread2","target","arguments","source","forEach","getOwnPropertyDescriptors","defineProperties","solverState","puzzle","solved","nextRow","nextCol","boardCondition","passed","oldConditions","oldBoard","getNumTrues","minTrues","maxTrues","onmessage","msg","generate","data","createSolution","createPuzzle","postMessage","newState","solverVisualizerNext"],"sourceRoot":""}